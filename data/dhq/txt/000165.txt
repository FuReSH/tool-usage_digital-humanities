

# Playing with Chance: On Random Generation in Playable Media and Electronic Literature 



## I. 


The standard line on the conceptual status of the aleatory in the world of electronic literature is strikingly demonstrated by Daniel C. Howe and Bebe Molina’s Roulette (shown above), which makes the construction of poetic language into a game of chance marked by an acute formal self-awareness. The work consists of three identical white wireframe cubes slowly spinning in space, with a randomly created prose poem down below. Inside each of the large wireframe cubes is a swarm of small, colorful, and solid cubes, spinning and ricocheting about like so many lottery balls, each with a single word printed on all their faces. The player of this game may click on one of these tiny cubes in order to expand its size to fill the wireframe, at which point the word written on it finally becomes legible, and a set phrase containing this word (which is highlighted in red) appears in the poem below. The position of the phrase is tied to the order of the wireframe cubes in which the selected words appear, and they often run across each other grammatically, creating a series of moving parts that may recast earlier iterations in a new light depending on how they fit together. For example, the words "a, ""coat, "and "clouds "may produce the following poem: "Beneath a thought, disfigured, a shadow takes a seat, removes the coat from its back; one sleeve inverted and left in a drawer, clouds shift into new phrases; how they move into an ear, little white coffins. "

Whereas changing the first two words to "light "and "meter "creates the following: "Light, as a word, refracts into misunderstanding, following shadows on the concrete, a thought wavers without meter & clouds shift into new phrases; how they move into an ear, little white coffins. "

The self-referential themes here are typical of the work, as well as the genre of generative poetry to which it belongs — the focus on language, the talk of new phrases and combinations, movement in and out of storage, refraction and change. What is unique about Roulette is the way in which it aesthetically foregrounds the functions of randomization and selection, which similar works tend to hide in the name of some inscrutable combinatorial demiurge that underlies the symbolic universe, linguistic and otherwise. The ‘Powerball’ motif of the wireframe cubes and the bold red hue of the chosen words in the output text make the roles of both uncontrollable chance and ludic choice readily apparent. At the same time, the output text of Roulette is highly fluid, whereas other combinatorial and generative texts tend to be segmented in ways that tend to sketch the outline of the underlying algorithms that create them. In this way, Roulette carnivalizes the ludic mechanics of chance, dressing it up in the thrill and cheap commercialism of the lottery, while still maintaining a strong investment in traditional poetic expressiveness. 

In their own way, such works create a permanent now, a store of possible variations that re-present themselves over and over through the workings of their core procedures, indifferent to traditional narrative progression but prone to altering and re-telling a story. In short, they present themselves as configurations. To borrow from Stephane Mallarmé in One Toss of the Dice never will abolish Chance , "Nothing….will have taken place…but the place…except perhaps….a constellation. "If there is something like a narrative element at all in works like Roulette , it occurs outside the boundaries of the object proper and becomes intertwined with the process of coming to understand how it functions and what the meaning of those functions are, a process that occurs somewhere between the user of a digital text and that text itself. This requires an interpretive position oriented toward the future, one which projects and then tests patterns — a struggle with faint outlines of meaning that is like coming to know an alien grammar. The place of chance in this investigation is key, as it supplies both the unpredictability and the underlying algorithmic coherence that structure this experience. 

Though complexity theory has a robust account of variation and randomness that has occasionally made inroads into literary studies [^See, for example, N. Katherine Hayles' Chaos Bound . ], randomness is rarely broached in digital media studies as a phenomenon in itself. Where it is considered, it is usually in the context of branching possibilities for interaction created by a digital artwork’s underlying rule set, programmed in its code, where the rule set (and the computational procedures it entails) provides an explanation of the experience of the object [c.f. , , , , , ]. This is consonant with earlier approaches that subsumed expressions of variation and play in digital literature under general categories [e.g., ], so that they could be treated as if they were stable (as opposed to contingent) for the purposes of criticism. In essence, this move attempts to stay the disorder of variation by setting limits, identifying rules that govern what would otherwise appear to be undifferentiated output or response in playable media including video games, hypertext fiction, and other forms of interactive digital art. This approach largely does not view the act of discovering or imagining such underlying rules — part of the reader’s inferential process as he or she tries to cope with a text that behaves in a seemingly unpredictable fashion — as an end in itself; instead, it focuses on the rhetorical and structural implications of a work’s rules, taking them as a starting point. To an extent, this is at odds with earlier methods that sought first to capture the experience of playable media, to identify key moments and themes through focusing on the reader’s cognitive or affective experience of the work , and then address the work’s rules or underlying structures of play as subsidiary to this, if at all. 

If one were to compare two approaches at play here — at the risk of oversimplifying, let’s call the first one the procedural method and the second one the experiential method — one can see two different sets of questions at work: the procedural method asks, "Why is the game played with these particular rules, and what do those rules mean for play? "whereas the experiential method asks, "How does a game typically go, and what is the meaning of this particular result (or set of results)? "The first aspires to view the object at a remove from experience, and thus formalizes that experience in a way, while the second is more richly detailed and yet more limited in its explanatory power, though it may nevertheless attempt to universalize from its findings. As general methodologies, however, these two aren’t equally useful for all kinds of digital objects; I would emphasize that while it is true that processes and experience both play an important role in playable media, they may prove to be inadequate lenses by themselves where we encounter works that emphasize chance operations above all else. In these cases, focusing on procedure simply takes us back to the fact of variance, presenting us with a range of possibilities without being able to adequately account for why it would be interesting to experience them as variations of a pre-coded set of rules. On the other hand, focusing on the experience of random variation gives us a disconnected series of results or a narrative portrait of the typical user experience that seems too personalized to account for the work’s plentitude. 

To engage random variation in digital art requires a combined approach, one that acknowledges the importance of procedure in giving shape to the randomness while also treating the experience of the work as a prospective act of discovery in which that underlying procedural shape gradually comes into view through repetition and feedback. In this respect, we might consider the procedural part of randomization like the grammar of a strange language and the actual program output as expressions of that language. Coming to understand the language, then, is a function of inferring that grammar through the interpretation of its individual expressions — a kind of procedural hermeneutics. By contrast, criticism that emphasizes the importance of rules in governing the meaning of digital art tends to leave out the fact that discovering the rules, either through inference or the assistance of tools, is actually often part of a work itself, and to start from the rules is in some cases to proceed backward, [^There are, of course, notable exceptions to this. In the Whitney Artport’s online "CODeDOC "exhibit (CODeDOC), the code of the digital art projects is presented before viewers actually see the exhibit in action. In such cases, however, the foregrounding of the code is usually a rhetorical device rather than an explicit roadmap: that is, it is a way of foregrounding the technique involved in the creation of the project rather than an attempt to explain its output. As the curator of the CODeDOC exhibit, Christiane Paul, puts it, the code can be considered as an artistic "signature, "in which one may find expression of authorial identity or craft. ]taking an already complete knowledge of them for granted and analyzing them as formal restraints on play. There is explanatory power in this approach, but there is also a remainder that it necessarily can’t approach because of its temporal orientation. 

This is because digital art has a tendency to live in the present, particularly in the performative mode. Though the presentism of digital art may not be as strong as that of, say, live television , there is an essential difference in character between the two formats: the latter is loaded with the social significance of an event, a mediation of a singularity, whereas the former promises to be repeatable, equivalent. Nevertheless, despite their iterability, generative algorithms in digital art can produce singularity on par with the event: an ephemeral object that is subject to viewing, passing into memory briefly before disappearing. Unlike the live TV example, iterability in digital art promises that something of the original experience will be recoverable, if not in the exact same expressive form; on the other hand, we can’t, as individuals, demand on a whim that there be another presidential debate. (An investigation into the ways in which modern presidential debates function algorithmically would be interesting nonetheless — input a question from a category, get a predictable easily formalized response.) 

But there are also live performances of digital art, of course, and the ways in which they can be recorded and preserved highlight the perils of delimiting human and machine participation where generative algorithms are involved. One might be tempted to make the assumption that an archived recording of a live digital art performance is equivalent to "previously recorded "live TV reruns, but complications in the mechanics of performance and redistribution create emergent problematics unknown to the world of cable. Generative algorithms are central to this distinction: by removing the viewer from interaction with or observation of generative processes, the line between human and machine action becomes blurred in reproduction. This effect is prominent in Bjørn Magnhildøen’s Plaintext Performance, which is "a live writing performance over the net combining 1) keyboard writing, 2) machinated, algorithmic writing, and 3) feeds from the processes surrounding the writing (like system monitoring, net connection monitoring, ftp log, etc.). "However, what is presented under this name in the Electronic Literature Collection Volume 2 is a "static version "of the performance: namely, a dumped record of the performance’s plain-text output, combined into a single, unadorned block of text that is automatically scrolled along an HTML web page using simple JavaScript code. This code prevents the work from being "static "in the technical sense, and it is the author’s concession to the live-ness of the original. The JavaScript even randomizes the page scrolling rate and entry point, so that it imitates the stops, stutters, and lurches endemic to any natural live performance — but ultimately these gyrations are too regular and too arbitrary to convincingly stand in for that performance. 

This iteration of Plaintext Performance (see screenshot below) is in this way a document rather than a "performance, "equal to a first-person narrative told by a projection screen at the event. While it is rather easy to tell where "feeds from the processes surrounding the writing "emerge in Magnhildøen’s work — this seems to refer to, for example, a simple and cleanly formatted table of running processes and their current actions, recurring at intervals — it is rather difficult to separate out the other two key elements, "keyboard writing "and "machinated, algorithmic writing, "in retrospect. There are scattered quotes and symbols that seem too undisciplined to have come from a machine, but one can never be sure; there are quotes, names, or fragmented sentences that could have been generated on the spot, or not; and there are bits of ASCII art that seem far too complex to have been generated on the fly, but small errors and the broad range of human performative capability lead one to uncertainty. It would be much easier to separate the machine-generated and the human-generated content during the performance itself, as the speed at which the generated versus the typed characters appeared would be a major giveaway; however, since the record is stored in a static, plain-text file, one is not given this observational luxury. 

Therein lies the significance of digital art’s unique temporality: by removing real-time computation from the equation and turning to the static form of the document, one creates legibility, allowing the past to be reproduced (or at least re-written), but in doing so one diminishes the performative and theatrical aspects of the art. Inasmuch as generative algorithms in digital art that isn’t "live "are nonetheless performative in some way — they are, after all, designed to be run as much as read — this can’t help but create a remainder that slips out of the range of a totalizing critical gaze. A literary studies approach that considers the text a self-contained object will necessarily experience much anxiety before the task of analyzing such a work. 

To confront performative, generative digital art is to confront an art that appears to revel in the erasure or distortion of its own record. This seems to go against foundational principles of humanistic study; as Alan Liu has it, a significant societal danger of the digital present is the permanent "now "that is enforced upon us by the endless creative destruction of our current cultural moment, with its attendant erasure of history and stifling of careful analysis, and resistance is to be achieved by confronting that temporality through an ethical unearthing of its historical failures . In the past, attempts to understand the formal qualities of a work of digital art through experience, without reference to coded processes, have typically relied on narrative or sensory metaphors [^There are several readings of interactive fiction or hypertext fiction — in particular, Michael Joyce’s Afternoon: A Story — that compare such works to wandering through a castle, maze, or other spatial construct (Douglas; Montfort, Twisty Little Passages ); more recently, N. Katherine Hayles compared the experience of Joyce’s Twelve Blue to the rhythm of the tides, lovemaking, and a sheet of music (63-4). ]to perform explanatory work, and this is consonant with Marie-Laure Ryan’s suggestion that play actions (e.g., actions undertaken in a video game) form a story when taken together . However, this method too has a hard time accounting for chance operations and lyrical engagement: the story of chance operations is the story of a dice roll told over and over again, and lyrical transport has a similarly flat narrative arc. Branching possibilities are resolved into the reader’s affective and cognitive states of exploration, which, while providing a phenomenological richness, cannot address that which of necessity can’t be narrated — namely, mutually exclusive possibilities bound into the rule system of a digital artwork. The more a digital artwork focuses on randomly generated content, the more it focuses on constructing an intricate system that will indefinitely produce content of a format that can be dictated algorithmically, and as such, the algorithm is something that is both subject to experience and outside of it. Each expression will have different contours of meaning while nonetheless stemming from the same source, the outlines of which will be visible in those expressions. Engaging with such a work is much like an engagement with an unknown form, working in reverse toward a concept of it that isn’t some kind of Platonic universal, but a particular and highly crafted artistic expression. 

The difficulty that generative art poses lies in the limitations of personal narrative experience for analysis and also the sketchy, overly formalized and abstracted outlines of procedural grammar that don't seem to do justice to any particular moment of such art. One is put in the position of trying to recover seemingly singular moments of the artwork into some broader scheme, because they might otherwise not appear again in the same configuration; this requires constantly memorializing the present with an eye to the future, making sure that the creative 'destruction' of the present maintains both a past and an afterlife free from structural abstraction. This tension is evident not just in criticism's understanding of art but also in the practice of digital artists who must juggle the formal with the concrete. In this way, Nick Montfort's poetry generator Taroko Gorge, which includes clear structural elements resulting from procedure as well as an emergent aesthetic features irreducible to that structure, shows the limits of both experiential and procedural approaches in understanding such works. Montfort is known as a consummate craftsman of poetry generation — Mark Marino identifies his ppg256 series of generators as representing the "poetry of techneculture, "a culture focused as much on coding technique and command lines as creating functional programs . The way Montfort's work has been both presented and received has traditionally borne this out: the ppg256 series, which I shall address in turn later, has been discussed more for its remarkably compact code than for the poetry it produces. His later work with Stephanie Strickland, Sea and Spar Between, makes the claim that its "resulting code tells the story [of the poetry generator] in detail, "identifying the structure of its generated poetry by the code functions used to create it: "A first line uses either shortLine(), oneNounLine(), or compoundCourseLine(). A second line uses either riseAndGoLine(), butLine(), exclaimLine(), or nailedLine() ". Even the source code of Taroko Gorge itself segments its output by phrases indicating height or depth, transitive or intransitive verbs, imperatives, and adjectives into lines of somewhat predictable length, and the elegance of the program resulted in several authors turning out a variety of "remixes "using the original code and line structure. All this would seem to indicate that for Montfort's oeuvre, code and procedure are king. 

However, when Montfort provided a reading of Taroko Gorge at the 2009 Digital Arts and Culture conference, rather than a presentation of its code, it was clear that its distinctive poetic rhythm is as constitutive of the audience’s experience as the program's built-in grammar and lineation. A series of short syllables punctuated by longer, adjective-laced lines, as well as regular variations in both, constitutes a second layer of poetic structuration above that called for in the program code: "
Stone paces the shape. 

Veins hum. 

Brows rest. 

Forest roams the vein. 

run the fine cool dim — 

Mist frames the flows. 

Flows linger. 

Shape roams the rippling. 

run the fine sinuous clear — 
"

The lengthening and truncating lines as they are read, followed by the lines with their dashes trailing off at the end, align with a structure in the source code that takes the form of a hiking sequence through the titular gorge: the output’s lines are organized into three segmented functions labeled "path, ""site, "and "cave, "a winding ascent and descent of a journey that tracks the rise and fall of the poetic cadence. In this way, the code makes clear the setting of the poem — the structuring concepts, grammar, and possible vocabulary used — while the reading of it makes clear the pacing and character of the journey through that setting. 

The methodological challenge of working toward such an outline is essentially that it requires a sort of divination, connecting the output of a work with an imagined version of its source code (or, if available, the actual code — though in either case, the code is only a set of instructions for the program that requires a non-trivial effort to connect to the actual experience of its operation). Whether or not one has the rules of such a work beforehand, it requires a prospective hermeneutic orientation to actually be able to connect program output with the expressive potential of those rules — that is to say, the difference between the rules as written and the in-practice experience of them as expressions conforming to a pattern. In that respect, then, it makes sense to treat the procedural elements of these works as always in development, not absolute. To explain this distinction, it will be useful to turn to Ernst Bloch’s philosophical discontent with the limitations of ontology. Bloch thought that Western philosophy relied too much on a static view of existence that was emblemized by a focus on Being with a capital B — that is, on objects having a definite, contained, and stable existence, not subject to growth or reinterpretation — and he instead stressed the importance of "becoming, "or the development of things in the world in a fashion that isn’t necessarily teleological but nevertheless oriented toward the outlines of a future state. He associated such a future-oriented style of thinking with hope, namely "hope…not taken only as emotion , as the opposite of fear (because fear too can of course anticipate), but more essentially as a directing act of a cognitive kind ". This forward-reasoning style of thought is also necessary to the act of inferring the formal rules of digital art objects mentioned above: both employ a hermeneutic that categorizes phenomena as signs of larger controlling forces that we don’t yet understand, whether those forces be unknown computational processes or the horizon of the future. 

While that may seem intuitive on one level, the approach is more involved when applied to works containing a vast array of combinatorial possibilities. In those instances, interpretation regarding the procedures that make up the work is essential to say anything at all, since many of them privilege the semantic excess and resistance to meaning that are hallmarks of randomization in art. The history of such procedures long predates digital art, and critics most often ascribe their origin to the language generation techniques of twentieth century writers using the "cut-up "method pioneered by the Dadaists , , , which involved cutting material from newspapers and magazines and selecting from them at random to create a form of word collage art. Another well-known reference point is the Oulipo group, a gathering of artists and mathematicians that designed constraints and formulae for creating literature (e.g., replacing each noun in a text with a noun seven entries ahead in a dictionary, writing that excludes certain letters, etc.). Beginning with Espen Aarseth’s oft-cited comparison between Oulipian constraints and digital fiction in Cybertext , such formal operations on language have been likened to computational processes, since they structure an output stream based on formulae , , ; see also , and . While cut-ups and Oulipian constraints are sometimes lumped together under labels of combinatorial or formal processing, their implications diverge. On the one hand, cut-ups use random selection as a means to incorporate chance into art; on the other, the Oulipo’s constraints and formulae have been presented as "anti-chance "from the beginning. Though Oulipian constraints such as those mentioned above are "chance "to the extent that they are arbitrary, what they produce has a syntactic regularity that can be traced back to the originating formula ]. In fact, the Oulipo had presented themselves as maker of literary formulae rather than literature itself , cementing their focus on process rather than the randomness of inspiration. 

The gulf between "chance "and "anti-chance "may not be as wide as it may seem when it comes to procedure, however. The cut-up method is, after all, a predictable method with defined materials, and to be clear, "anti-chance "does not mean a total absence of variation, a rule that always generates the same result, but rather means the appearance of formal consistency. This is summed up well by a distinction Marjorie Perloff makes between rules and constraints in writing poetry: rules create definite expectations for an audience that an author will follow, as in poetic measure, whereas constraints are "primarily generative , the constraint determining, not what is already fixed as a property of the text, but how the writer will proceed with his composition . "Anti-chance "in this sense may then be redefined according to the legibility of such a constraint within a composition. 

The more a work is dominated by unseen chance operations, then the more a simply procedural or experiential understanding of digital media objects will be inadequate to understanding the significance of those objects. In such situations, we are perhaps better served by emphasizing the act of working through, that is, how one comes to know the rules (and the possible results) in the first place. It is here that Bloch’s philosophy proves most useful: according to Bloch, we understand the future by understanding the present, by looking for signs of what is to come in many different places at once. The act of coming to know the formal processes of a work of digital art involves a similar method of interpretation: by experiencing multiple chance iterations in a row, we begin to forecast what will come in the next iteration using what we’ve already seen. The one important distinction is that whereas Bloch’s world is in a constant state of becoming, the code that governs most digital art objects remains the same. However, this doesn’t mean that the subjective process of inferring the rules created by the code is always the same, as the code is at the source of a work that is then subject to a process of understanding, interpretation, and interaction that is equally a part of digital art. To elaborate, I will turn now to a kind of digital art that relies heavily on this balance between constraint and chance: text generators, or computer programs that are able to combine text to produce stories, poems, and so forth. 


## II. 


Text generating programs in the digital sphere frequently fall into one of three categories: the genre parody, the mash-up, or the purely generative. Parodies, the first category in question, are among the most common, as in Andrew C. Bulhak’s Postmodernism Generator , a satire of postmodernist theoretical styles, or Nanette Wylde’s Storyland , a work that generates terse and absurd fairy tales. Such works typically ape the language and tropes of a target object and create a nonsensical or ridiculous output using recognizable genre conventions. Secondly, a significant body of non-parodic text generating programs borrows from the remix or mash-up, creating a pre-defined body of text — either the author’s original work or borrowed from other sources — and then de-combining and re-combining the text through various algorithms and user interactions. These text mash-ups typically locate themselves somewhere between the cut-up technique , , and the procedural poetics of the Oulipo , , in that they involve procedural randomness in selecting random text but nonetheless have highly structured patterns regulating them in the source code. Such an approach may also be associated more broadly with what Lev Manovich calls the "remix culture "of new media: the tendency to "place together old and new in various combinations "as a reflection of growing hybridization in networked society . A third kind of text generation is more oblique, not relying on direct user manipulation or recognizable styles or source text, and instead seeming to generate text ex nihilo based on original algorithms. Works of this type engender a sense of boundlessness, as they present seemingly inexhaustible source of text which shifts with each new iteration and which isn’t as functionally targeted as, say, the parodic styles mentioned above. As with other text generating programs, they are meant to be run again and again: multiple runs reinforce (as well as verify) their raison d’être, which is the creation of unique combinations with each stroke. At the same time, their reiteration reinforces the fact that they are not actually inexhaustible, as patterns will emerge from the grammar employed by the source code. 

As with much text generation, however, the unlimited, variable output is nonetheless beholden to a curious form of stasis. Montfort recognizes that programmed randomness isn’t absolute, and is instead more accurately a "pseudorandom "process that "chooses an element from a distribution ". That is to say, randomly generated texts are never generated entirely at "random, "but conform to a pre-coded limit that is fleshed out by the computerized selection of elements from a data set; "randomness "is therefore the approximation of chaos that the text wants to own but can never properly have, and which it can only approach, ironically enough, through the repetition of the same generative procedure over and over. Each iteration is a ritual step in the establishment and verification of the random elements as random, while at the same time making the limitations on that randomness all the more apparent as patterns begin to emerge. The meaning is in the repetition; this is part of a broader phenomenon in digital art noted by David Ciccoricco, one that valorizes looping structures at every level, from recursion in underlying computer code to repeating navigation patterns in hypertext fiction . Tellingly, Ciccoricco frames this phenomenon as "fundamental to (hyper)textual comprehension, "suggesting that it interrogates our very ability to understand art as such and makes rereading an essential (and not merely optional) element . However, in the case of text generation, "comprehension "comes about only by conflating the program structure with its output, much like confusing a language with its grammar. It is not sufficient to use terms like "rereading "to describe what happens in different iterations of such works, since to "reread "is to suggest that the repeated elements are visible instead of a phantasmic structural trace of the source code and to suggest that the product on screen is only what matters, not the concept of the generator itself. As is the case with Montfort’s work, it is only the combination of the two that makes each individually possible. 

This model of tracing an underlying grammar through repetition, which thereby produces something emergent that is irreducible to either procedure or experience alone, can even be extended to how we play certain genres of video games. While poetry and text generators along the lines described above typically have no significant element of user choice or interaction, since all they require is to be run, and their use is typically interpretive rather than goal- or task-oriented , there are significant similarities in the way we work through both games and random text generators. First, when considering video games as an interactive medium, it is useful to bear in mind Espen Aarseth's caution regarding the ideological "rhetoric of novelty, differentiation, and freedom "that surrounds such media and obscures their connection to older expressive forms — the possibility of "interaction "with a digital object does not necessarily entail that that interaction has critical significance. Second, action in video games is "situated and improvisational, "as Noah Wardrip-Fruin puts it — while players may make plans for action in a game world, they nonetheless face constraints based in the game design, game engine, etc. that requires a form of readjustment based on a limited number of available affordances . In other words, the genre distinction between the poetry generator and the video game isn't so much the insertion of player "choice "as two different modes of creating an interpretive schema about the underlying processes involved in the respective object. In the case of poetry and text generators, this understanding may be offered for critical commentary or (in the case of Taroko Gorge , for example) passed on into further work or remixes, while in the case of video games, the understanding can be used to gain rewards in the game or in any number of social spaces attached to the game (e.g., multiplayer modes, clans or other social groupings of players, etc.). [^Some may argue that this understanding is already given with poetry generators that release their source code but not the case with video games, which rarely release their source code. While the code for poetry generators is published far more often than the code of video games, typically game enthusiasts will nevertheless investigate, compile, and then publish all relevant algorithms and game mechanics that would thereby be discovered anyway. ]

Most video games have content that is generated with some random variation according to an algorithm, as in a poetry generator, though those generated objects typically take the form of rewards or obstacles rather than language. Nevertheless, in order to play the game successfully, a player must develop a means of dealing with this variation and must develop an understanding of the mechanisms behind it, and this is particularly so in the case of some games that rely heavily on randomly generated rewards and repetitive action. The chief example of this kind of game is the sub-subgenre of action role-playing games known as "Diablo clones "— so named for the game that serves as its blueprint — which is predicated on the idea that the process of discovering randomly generated rewards can create a world of permanent surprise and interest, yet be contained within fairly simple, unvarying, and even minimalist gameplay. 

I will examine here for a moment one recent entry in the "Diablo clone "genre that distills several stock elements into perhaps the sharpest focus on generated content that the genre has yet seen. Torchlight , much like its predecessors in the mold of Rogue and Diablo , has the player descend through the randomly-generated levels of a dungeon while picking up randomly-generated loot, killing the occasional randomly-enhanced foe along with the standard ones, hacking and slashing in a typically frenetic but repetitive fashion. The game isn’t really about reaching an endpoint; though there is a final boss to defeat, there are an indefinite number of generated levels in the dungeon to descend through thereafter, with ever-stronger foes and loot to match. Though the aftermath of the game is essentially a superficial, mathematically extended version of what comes before, the choice to do away with the expected limits brought on by narrative closure is telling in that it reveals the true object of play — that is, an unstinting devotion to the character’s development, which occurs through slaying more enemies, upgrading skills, and getting more powerful equipment. Such an incentive structure may immediately call to mind massively multiplayer online role-playing games; as Tof Eklund has noted, the genre draws heavily upon the Protestant work ethic, where through vigorously working on developing one’s character, one will eventually receive the satisfaction of being promoted (to a higher character level, to a higher status within one’s guild, etc.) . However, it’s important to note that Torchlight features no online component, which makes the application of social models more complicated here. This, coupled with the unending string of random levels and treasure, makes it unique among its peers while making the attention to endless character enhancement all the more curious due to its comparative isolation, limiting the sense of competition or transferability. There is an almost monastic impulse in the self-denial of grinding through levels of Torchlight in order to receive rewards that can only be understood in an isolation that is not exactly spiritual, but nonetheless personal and unlinked to any primary social economy. The loot collected provides the tools with which to collect more, which then can be used to help promote the growth of the player’s avatar, but there is no method to trade or otherwise compete, cooperate, or even interact with other players. With no other unpredictable, human forces present to reshape the player’s way of doing things in a social dimension, the sense of repetitiveness is concentrated. This effect is further compounded by Torchlight’s basic gameplay, which (as with other action RPGs) is tedious in design: the main action consists of clicking the same two mouse buttons at hordes of similar-looking monsters, punctuated by the occasional press of an additional shortcut key to use one of the limited selections of items or powers. The sole exception to this is the involved system of compromises one enters into with the character upgrade and inventory menus, which are loaded with stats and information, presenting a stark contrast to the otherwise fairly mindless action and enshrining such development as the true focus of the game. Almost like a penitent sinner, the player engages in borderline self-abuse chiefly for the thought that there will be redemption — or some kind of reward, which may not be comprehendible outside the player’s own self-abusive logic — just around the corner. 

Ernst Bloch would read this sort of activity as a basic form of longing obsessed with itself, an addiction, and yet it seems all too close to the ways in which we read through the ludic elements of electronic literature: a repetition that creates pleasurable forms resembling an invisible but nonetheless palpable generative process. In the narrative mode of thinking, we forestall the need to repeat a ludic sequence by putting a narrative frame around it: killing this or that monster, or getting this or that piece of treasure becomes the analog of passing a certain guard field in hypertext fiction or experiencing a certain combination of text, a chance event that can’t seem to be represented without supplying a less variable background that will give it critical coherence. In this way, the player experiences saving the randomly generated elements from their ontological indeterminacy as mere possibilities, establishing an intelligible order that will nonetheless be challenged (as in any other critical enterprise) anytime anyone decides to pick up the same object one more time. The establishment of such an order differs slightly from what happens in the reading of print literature because of the need to explain actions and occurrences — the exercise of "non-trivial effort, "in Aarseth’s well-known terms — in addition to emphases and interpretations. This creates the need to imagine a structure, metaphorical or otherwise, under which an action’s potential outcomes can become legible as events , granting them an almost physical existence while at the same time subsuming their other possible random variations all under an invented equivalency. Thus all potential events from one action in a ludic text cannot but be the expression of a single impulse, be it process or form or something else, which can truly be elevated to the status of a happening instead of a radically indeterminate potential. 

If this tension between process and possibility is something we value as an essential component in playable media, and if this is a useful contrast with the linearity we associate with non-interactive media, then perhaps it is this desire to retain the openness of our objects that explains our frequent looks in digital studies toward the future, rather than a shallow desire for something new as the common accusation has it. Random generation requires a context in order to be coherent and the underlying grammar of code to give it shape, even if the outlines appear only gradually. In such cases, we must consider that coming to know how processes work doesn’t always explain only a work’s dynamics; rather, it also tells the story of the work itself. 


# notes

[^1]: See, for
                            example, N. Katherine Hayles' Chaos
                            Bound.
[^2]:  There are, of
                            course, notable exceptions to this. In the Whitney Artport’s online
                                CODeDOC exhibit (CODeDOC), the code of the digital art
                            projects is presented before viewers actually see the exhibit in action.
                            In such cases, however, the foregrounding of the code is usually a
                            rhetorical device rather than an explicit roadmap: that is, it is a way
                            of foregrounding the technique involved in the creation of the project
                            rather than an attempt to explain its output. As the curator of the
                            CODeDOC exhibit, Christiane Paul, puts it, the code can be considered as
                            an artistic signature, in which one may find expression of
                            authorial identity or craft.
[^3]:  There are several readings of interactive fiction or
                            hypertext fiction — in particular, Michael Joyce’s Afternoon: A Story — that compare such works to wandering
                            through a castle, maze, or other spatial construct (Douglas; Montfort,
                                Twisty Little Passages); more recently,
                            N. Katherine Hayles compared the experience of Joyce’s Twelve Blue to the rhythm of the tides,
                            lovemaking, and a sheet of music (63-4).
[^4]: Some may argue that this understanding is
                            already given with poetry generators that release their source code but
                            not the case with video games, which rarely release their source code.
                            While the code for poetry generators is published far more often than
                            the code of video games, typically game enthusiasts will nevertheless
                            investigate, compile, and then publish all relevant algorithms and game
                            mechanics that would thereby be discovered anyway.